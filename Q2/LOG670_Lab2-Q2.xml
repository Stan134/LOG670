<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>////////////////////////////////////
//Définition des constante globale
////////////////////////////////////
// Limite de véhicule simultanément sur le pont
const int CAPACITE_PONT = 3;
// Quantité de véhicule à laisser passer avant de changer de direction
const int EQUITE_VEHICULE = 5;
// Temps avant de changer de direction
const int EQUITE_TEMPS = 18; 
// Nombre de véhicule à instancier
const int NB_INSTANCES_VEH = 5;
// Nombre de véhicule Prioritaire à instancier
const int NB_INSTANCES_VEHP = 1;
// Temps nécessaire pour traverser le pont
const int TEMPS_TRAVERSER_PONT = 4; 

////////////////////////////////////
//Définition des types
////////////////////////////////////
//Type utiliser pour les identifiants unique des véhicules
typedef int[0,NB_INSTANCES_VEH-1] id_vehicule;

//Type utiliser pour les identifiants unique des véhicules prioritaire
typedef int[0,NB_INSTANCES_VEHP-1] id_vehicule_p;

/////////////////////////////////////
// Définition des variables globales
/////////////////////////////////////
// Nombre de véhicule actuellement sur le pont
int[0,CAPACITE_PONT+1] nbVehiculeSurPont;

/////////////////////////////////////
// Définition des canaux globaux
/////////////////////////////////////
chan apprA[NB_INSTANCES_VEH];
chan enterA[NB_INSTANCES_VEH];
chan onBridgeA[NB_INSTANCES_VEH];
chan stopA[NB_INSTANCES_VEH];
chan leaveA[NB_INSTANCES_VEH];
urgent chan goA[NB_INSTANCES_VEH];

chan apprB[NB_INSTANCES_VEH];
chan enterB[NB_INSTANCES_VEH];
chan onBridgeB[NB_INSTANCES_VEH];
chan stopB[NB_INSTANCES_VEH];
chan leaveB[NB_INSTANCES_VEH];
urgent chan goB[NB_INSTANCES_VEH];

chan apprPA[NB_INSTANCES_VEHP];
chan apprPB[NB_INSTANCES_VEHP];




</declaration><template><name x="5" y="5">VAA</name><parameter>const id_vehicule id</parameter><declaration>// Horloge utilisée pour simuler le temps que prend un véhicule pour traverser le pont
clock tempsTraverser;
// Horloge utilisée pour calculer et vérifier le temps d'attente d'un véhicule
clock tempsAttente;</declaration><location id="id0" x="304" y="8"><committed/></location><location id="id1" x="304" y="-152"><name x="320" y="-168">EstSurPont</name></location><location id="id2" x="56" y="96"><name x="32" y="104">Attente</name></location><location id="id3" x="152" y="8"><name x="112" y="-32">EntreSurPontA</name><committed/></location><location id="id4" x="-48" y="8"><name x="-128" y="0">Approche</name></location><location id="id5" x="-48" y="-152"><name x="-96" y="-168">Loin</name></location><init ref="id5"/><transition><source ref="id0"/><target ref="id1"/><label kind="synchronisation" x="312" y="-80">onBridgeA[id]!</label></transition><transition><source ref="id3"/><target ref="id0"/><label kind="synchronisation" x="192" y="8">enterA[id]!</label><label kind="assignment" x="168" y="24">tempsTraverser := 0</label></transition><transition><source ref="id1"/><target ref="id5"/><label kind="guard" x="-24" y="-200">tempsTraverser &gt;= TEMPS_TRAVERSER_PONT</label><label kind="synchronisation" x="88" y="-184">leaveA[id]!</label><nail x="24" y="-152"/></transition><transition><source ref="id2"/><target ref="id3"/><label kind="synchronisation" x="88" y="64">goA[id]?</label></transition><transition><source ref="id4"/><target ref="id2"/><label kind="synchronisation" x="-72" y="56">stopA[id]?</label><label kind="assignment" x="-104" y="72">tempsAttente := 0</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="synchronisation" x="8" y="-16">goA[id]?</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="synchronisation" x="-120" y="-96">apprA[id]!</label></transition></template><template><name>VAB</name><parameter>const id_vehicule id</parameter><declaration>// Horloge utilisée pour simuler le temps que prend un véhicule pour traverser le pont
clock tempsTraverser;
// Horloge utilisée pour calculer et vérifier le temps d'attente d'un véhicule
clock tempsAttente;
</declaration><location id="id6" x="368" y="0"><committed/></location><location id="id7" x="368" y="-144"><name x="384" y="-152">EstSurPont</name></location><location id="id8" x="88" y="80"><name x="64" y="88">Attente</name></location><location id="id9" x="192" y="0"><name x="144" y="-32">EntreSurPontB</name><committed/></location><location id="id10" x="8" y="0"><name x="-72" y="-8">Approche</name></location><location id="id11" x="8" y="-144"><name x="-40" y="-152">Loin</name></location><init ref="id11"/><transition><source ref="id6"/><target ref="id7"/><label kind="synchronisation" x="376" y="-88">onBridgeB[id]!</label></transition><transition><source ref="id9"/><target ref="id6"/><label kind="synchronisation" x="248" y="0">enterB[id]!</label><label kind="assignment" x="224" y="16">tempsTraverser = 0</label></transition><transition><source ref="id7"/><target ref="id11"/><label kind="guard" x="32" y="-184">tempsTraverser &gt;= TEMPS_TRAVERSER_PONT</label><label kind="synchronisation" x="144" y="-168">leaveB[id]!</label><nail x="184" y="-144"/><nail x="120" y="-144"/></transition><transition><source ref="id10"/><target ref="id9"/><label kind="synchronisation" x="72" y="-24">goB[id]?</label></transition><transition><source ref="id8"/><target ref="id9"/><label kind="synchronisation" x="136" y="40">goB[id]?</label></transition><transition><source ref="id10"/><target ref="id8"/><label kind="synchronisation" x="-32" y="48">stopB[id]?</label><label kind="assignment" x="-80" y="64">tempsAttente := 0</label></transition><transition><source ref="id11"/><target ref="id10"/><label kind="synchronisation" x="-64" y="-104">apprB[id]!</label><label kind="assignment" x="-112" y="-80">tempsAttente = 0</label></transition></template><template><name>CTRLP</name><declaration>////////////////////////////////////
//Définition des variables de la classe
////////////////////////////////////

// Horloge utilisée pour s'assurer que le temps de chaque type soit équitable
clock x;
// Compteur de nombre de véhicule passé depuis le dernier changement de direction
int nbVehiculePasse = 0;

////////////////////////////////////
//Définition des variables et fonctions pour la liste
//d'attente de véhicule de type A
////////////////////////////////////
// Array pour la file d'attente des véhicule de type A
id_vehicule listAttenteA[NB_INSTANCES_VEH+1];
int[0,NB_INSTANCES_VEH] nbAttenteA;

id_vehicule frontA() {
     return listAttenteA[0];
}

id_vehicule tailA() {
     return listAttenteA[nbAttenteA - 1];
}

// Ajouter un véhicule de type A à la file d'attente
void enqueueA(id_vehicule id) {
    listAttenteA[nbAttenteA++] = id;
}

void dequeueA() {
    int i = 0;
    ++nbVehiculePasse;
    --nbAttenteA;

    while (i &lt; nbAttenteA) {
        listAttenteA[i] = listAttenteA[i + 1];
        ++i;
    }
    
    listAttenteA[i] = 0;
}

////////////////////////////////////
//Définition des variables et fonctions pour la liste
//d'attente de véhicule prioritaire de type A
////////////////////////////////////
// Array pour la file d'attente des véhicule de type A
id_vehicule listAttentePA[NB_INSTANCES_VEHP+1];
int[0,NB_INSTANCES_VEHP] nbAttentePA;

id_vehicule frontPA() {
     return listAttentePA[0];
}

id_vehicule tailPA() {
     return listAttentePA[nbAttentePA - 1];
}

// Ajouter un véhicule prioritaire de type A à la file d'attente
void enqueuePA(id_vehicule_p id) {
    listAttentePA[nbAttentePA++] = id;
}

void dequeuePA() {
    int i = 0;
    ++nbVehiculePasse;
    --nbAttentePA;

    while (i &lt; nbAttentePA) {
        listAttentePA[i] = listAttentePA[i + 1];
        ++i;
    }
    
    listAttentePA[i] = 0;
}

////////////////////////////////////
//Définition des variables et fonctions pour la liste
//d'attente de véhicule de type B
////////////////////////////////////
// Array pour la file d'attente pour véhicule de type B
id_vehicule listAttenteB[NB_INSTANCES_VEH+1];

int[0,NB_INSTANCES_VEH] nbAttenteB;

id_vehicule frontB() {
     return listAttenteB[0];
}

id_vehicule tailB() {
     return listAttenteB[nbAttenteB - 1];
}

// Ajouter un véhicule de type B à la file d'attente
void enqueueB(id_vehicule id) {
    listAttenteB[nbAttenteB++] = id;
}

void dequeueB() {
    int i = 0;
    ++nbVehiculePasse;
    --nbAttenteB;

    while (i &lt; nbAttenteB) {
        listAttenteB[i] = listAttenteB[i + 1];
        ++i;
    }
    
    listAttenteB[i] = 0;
}

////////////////////////////////////
//Définition des variables et fonctions pour la liste
//d'attente de véhicule prioritaire de type B
////////////////////////////////////
// Array pour la file d'attente pour véhicule de type B
id_vehicule listAttentePB[NB_INSTANCES_VEHP+1];

int[0,NB_INSTANCES_VEHP] nbAttentePB;

id_vehicule frontPB() {
     return listAttentePB[0];
}

id_vehicule tailPB() {
     return listAttentePB[nbAttentePB - 1];
}

// Ajouter un véhicule prioritaire de type B à la file d'attente
void enqueuePB(id_vehicule_p id) {
    listAttentePB[nbAttentePB++] = id;
}

void dequeuePB() {
    int i = 0;
    ++nbVehiculePasse;
    --nbAttentePB;

    while (i &lt; nbAttentePB) {
        listAttentePB[i] = listAttentePB[i + 1];
        ++i;
    }
    
    listAttentePB[i] = 0;
}

////////////////////////////////////
//Autres fonctions de la classe
////////////////////////////////////

// Remise à zéro des compteurs pour l'équité
void reset() {
    nbVehiculePasse = 0;
    x = 0;
}

void startDirectionA(id_vehicule firstElement) {
    reset();
    enqueueA(firstElement);
}

void startDirectionB(id_vehicule firstElement) {
    reset();
    enqueueB(firstElement);
}

void startDirectionPA(id_vehicule_p firstElement) {
    reset();
    enqueuePA(firstElement);
}

void startDirectionPB(id_vehicule_p firstElement) {
    reset();
    enqueuePA(firstElement);
}</declaration><location id="id12" x="-1256" y="-368"><name x="-1266" y="-398">EnChangementDeDirectionVersPA</name><label kind="invariant" x="-1266" y="-353">nbAttentePA &gt; 0</label><urgent/></location><location id="id13" x="-1656" y="96"><committed/></location><location id="id14" x="-1808" y="-416"><label kind="invariant" x="-1856" y="-448">nbAttentePB &gt; 0</label><urgent/></location><location id="id15" x="-1880" y="24"><label kind="invariant" x="-2320" y="16">(nbVehiculePasse &lt; EQUITE_VEHICULE &amp;&amp; x &lt; EQUITE_TEMPS)</label><committed/></location><location id="id16" x="-1912" y="-160"><label kind="invariant" x="-2392" y="-176">nbAttenteB &gt; 0
&amp;&amp; ((nbVehiculePasse &lt; EQUITE_VEHICULE &amp;&amp; x &lt; EQUITE_TEMPS) 
     || nbAttenteA == 0)</label></location><location id="id17" x="-1256" y="-464"><name x="-1272" y="-504">EnChangementDeDirectionVersA</name><label kind="invariant" x="-1266" y="-449">nbAttenteA &gt; 0</label></location><location id="id18" x="-648" y="-96"><label kind="invariant" x="-632" y="-104">(nbVehiculePasse &lt; EQUITE_VEHICULE &amp;&amp; x &lt; EQUITE_TEMPS)</label><committed/></location><location id="id19" x="-760" y="-320"><label kind="invariant" x="-880" y="-400">nbAttenteA &gt; 0
&amp;&amp; ((nbVehiculePasse &lt; EQUITE_VEHICULE &amp;&amp; x &lt; EQUITE_TEMPS) 
     || nbAttenteB == 0)</label></location><location id="id20" x="-1256" y="64"><name x="-1336" y="96">EnChangementDeDirectionVersB</name><label kind="invariant" x="-1304" y="80">nbAttenteB &gt; 0</label></location><location id="id21" x="-1624" y="-192"><name x="-1656" y="-224">DirectionB</name></location><location id="id22" x="-856" y="-184"><name x="-896" y="-248">DirectionA</name></location><location id="id23" x="-1256" y="-184"><name x="-1288" y="-216">Disponible</name><label kind="invariant" x="-1328" y="-240">nbVehiculeSurPont == 0</label></location><init ref="id23"/><transition><source ref="id12"/><target ref="id22"/><label kind="guard" x="-1152" y="-320">nbVehiculeSurPont == 0</label><label kind="assignment" x="-1024" y="-304">reset()</label><nail x="-1024" y="-368"/></transition><transition><source ref="id13"/><target ref="id21"/><label kind="synchronisation" x="-1600" y="72">stopA[tailPA()]!</label><nail x="-1600" y="80"/></transition><transition><source ref="id21"/><target ref="id13"/><label kind="select" x="-1776" y="88">e: id_vehicule_p</label><label kind="synchronisation" x="-1776" y="118">apprPA[e]?</label><label kind="assignment" x="-1776" y="133">enqueuePA(e)</label><nail x="-1712" y="72"/></transition><transition><source ref="id14"/><target ref="id21"/><label kind="synchronisation" x="-1968" y="-424">onBridgeB[frontB()]?</label><label kind="assignment" x="-1968" y="-408">dequeuePB()</label></transition><transition><source ref="id21"/><target ref="id14"/><label kind="guard" x="-1936" y="-480">nbVehiculeSurPont &lt; CAPACITE_PONT</label><label kind="synchronisation" x="-1856" y="-464">goB[frontPB()]!</label><nail x="-1768" y="-424"/></transition><transition><source ref="id23"/><target ref="id21"/><label kind="select" x="-1448" y="-96">e: id_vehicule_p</label><label kind="guard" x="-1448" y="-80">nbVehiculeSurPont == 0</label><label kind="synchronisation" x="-1416" y="-64">apprPB[e]?</label><label kind="assignment" x="-1416" y="-48">startDirectionPB(e)</label><nail x="-1304" y="32"/></transition><transition><source ref="id23"/><target ref="id22"/><label kind="select" x="-1224" y="-96">e: id_vehicule_p</label><label kind="guard" x="-1224" y="-80">nbVehiculeSurPont == 0</label><label kind="synchronisation" x="-1224" y="-64">apprPB[e]?</label><label kind="assignment" x="-1224" y="-48">startDirectionPA(e)</label><nail x="-1216" y="32"/></transition><transition><source ref="id21"/><target ref="id12"/><label kind="guard" x="-1512" y="-360">nbAttentePB == 0 
&amp;&amp; nbAttentePA &gt; 0</label><nail x="-1552" y="-368"/></transition><transition><source ref="id22"/><target ref="id20"/><label kind="guard" x="-1064" y="-48">nbAttentePA == 0 
&amp;&amp; nbAttentePA &gt; 0</label><nail x="-928" y="-8"/></transition><transition><source ref="id21"/><target ref="id17"/><label kind="guard" x="-1560" y="-440">nbAttenteB == 0</label><nail x="-1624" y="-448"/><nail x="-1280" y="-464"/></transition><transition><source ref="id22"/><target ref="id20"/><label kind="guard" x="-1032" y="16">nbAttenteA == 0</label><nail x="-872" y="40"/></transition><transition><source ref="id15"/><target ref="id21"/><label kind="synchronisation" x="-1968" y="-32">stopA[tailA()]!</label><nail x="-1880" y="-32"/></transition><transition><source ref="id21"/><target ref="id15"/><label kind="select" x="-1864" y="32">e : id_vehicule</label><label kind="synchronisation" x="-1864" y="48">apprA[e]?</label><label kind="assignment" x="-1868" y="68">enqueueA(e)</label><nail x="-1808" y="32"/></transition><transition><source ref="id21"/><target ref="id21"/><label kind="select" x="-1912" y="-384">e : id_vehicule</label><label kind="guard" x="-2312" y="-336">((nbVehiculePasse &lt; EQUITE_VEHICULE &amp;&amp; x &lt; EQUITE_TEMPS) 
     || nbAttenteA == 0)</label><label kind="synchronisation" x="-1912" y="-368">apprB[e]?</label><label kind="assignment" x="-1944" y="-353">enqueueB(e)</label><nail x="-1872" y="-336"/><nail x="-1896" y="-280"/></transition><transition><source ref="id16"/><target ref="id21"/><label kind="synchronisation" x="-1984" y="-128">onBridgeB[frontB()]?</label><label kind="assignment" x="-1984" y="-112">dequeueB()</label><nail x="-1896" y="-128"/></transition><transition><source ref="id21"/><target ref="id16"/><label kind="guard" x="-2016" y="-192">nbVehiculeSurPont &lt; CAPACITE_PONT</label><label kind="synchronisation" x="-1920" y="-208">goB[frontB()]!</label></transition><transition><source ref="id21"/><target ref="id17"/><label kind="guard" x="-1688" y="-504">nbVehiculePasse &gt;= EQUITE_VEHICULE || x &gt; EQUITE_TEMPS</label><nail x="-1664" y="-472"/></transition><transition><source ref="id17"/><target ref="id22"/><label kind="guard" x="-1000" y="-480">nbVehiculeSurPont == 0</label><label kind="assignment" x="-952" y="-464">reset()</label><nail x="-952" y="-464"/></transition><transition><source ref="id21"/><target ref="id23"/><label kind="guard" x="-1472" y="-152">nbAttenteA == 0 
&amp;&amp; nbAttenteB == 0</label><nail x="-1352" y="-160"/></transition><transition><source ref="id18"/><target ref="id22"/><label kind="synchronisation" x="-816" y="-72">stopB[tailB()]!</label><nail x="-784" y="-72"/></transition><transition><source ref="id19"/><target ref="id22"/><label kind="synchronisation" x="-880" y="-296">onBridgeA[frontA()]?</label><label kind="assignment" x="-848" y="-280">dequeueA()</label></transition><transition><source ref="id22"/><target ref="id18"/><label kind="select" x="-704" y="-168">e : id_vehicule</label><label kind="synchronisation" x="-704" y="-152">apprB[e]?</label><label kind="assignment" x="-704" y="-136">enqueueB(e)</label><nail x="-776" y="-152"/><nail x="-744" y="-136"/></transition><transition><source ref="id22"/><target ref="id23"/><label kind="guard" x="-1208" y="-152">nbAttenteA == 0 
&amp;&amp; nbAttenteB == 0</label><nail x="-1144" y="-152"/></transition><transition><source ref="id22"/><target ref="id19"/><label kind="guard" x="-728" y="-296">nbVehiculeSurPont &lt; CAPACITE_PONT</label><label kind="synchronisation" x="-720" y="-312">goA[frontA()]!</label><nail x="-728" y="-288"/><nail x="-728" y="-296"/></transition><transition><source ref="id22"/><target ref="id20"/><label kind="guard" x="-1016" y="64">nbVehiculePasse &gt;= EQUITE_VEHICULE || x &gt; EQUITE_TEMPS</label><nail x="-832" y="64"/></transition><transition><source ref="id20"/><target ref="id21"/><label kind="guard" x="-1544" y="16">nbVehiculeSurPont == 0</label><label kind="assignment" x="-1480" y="40">reset()</label><nail x="-1544" y="64"/></transition><transition><source ref="id22"/><target ref="id22"/><label kind="select" x="-680" y="-264">e : id_vehicule</label><label kind="guard" x="-720" y="-216">((nbVehiculePasse &lt; EQUITE_VEHICULE &amp;&amp; x &lt; EQUITE_TEMPS) 
     || nbAttenteB == 0)</label><label kind="synchronisation" x="-680" y="-248">apprA[e]?</label><label kind="assignment" x="-720" y="-232">enqueueA(e)</label><nail x="-728" y="-240"/><nail x="-732" y="-192"/></transition><transition><source ref="id23"/><target ref="id21"/><label kind="select" x="-1528" y="-256">e : id_vehicule</label><label kind="guard" x="-1528" y="-241">nbVehiculeSurPont == 0</label><label kind="synchronisation" x="-1528" y="-226">apprB[e]?</label><label kind="assignment" x="-1528" y="-211">startDirectionB(e)</label></transition><transition><source ref="id23"/><target ref="id22"/><label kind="select" x="-1096" y="-256">e : id_vehicule</label><label kind="guard" x="-1096" y="-240">nbVehiculeSurPont == 0</label><label kind="synchronisation" x="-1096" y="-224">apprA[e]?</label><label kind="assignment" x="-1096" y="-208">startDirectionA(e)</label></transition></template><template><name>P</name><location id="id24" x="-1104" y="-32"><name x="-1160" y="0">OccupeDirectionB</name></location><location id="id25" x="-528" y="-32"><name x="-576" y="0">OccupeDirectionA</name></location><location id="id26" x="-824" y="-32"><name x="-840" y="-64">Vide</name><label kind="invariant" x="-896" y="-80">nbVehiculeSurPont == 0</label></location><init ref="id26"/><transition><source ref="id24"/><target ref="id24"/><label kind="select" x="-1304" y="33">e : id_vehicule</label><label kind="guard" x="-1304" y="48">nbVehiculeSurPont &gt; 1</label><label kind="synchronisation" x="-1304" y="63">leaveB[e]?</label><label kind="assignment" x="-1304" y="80">--nbVehiculeSurPont</label><nail x="-1248" y="24"/><nail x="-1248" y="-32"/></transition><transition><source ref="id24"/><target ref="id24"/><label kind="select" x="-1304" y="-167">e : id_vehicule</label><label kind="guard" x="-1304" y="-152">nbVehiculeSurPont &lt;= CAPACITE_PONT</label><label kind="synchronisation" x="-1304" y="-137">enterB[e]?</label><label kind="assignment" x="-1304" y="-122">++nbVehiculeSurPont</label><nail x="-1248" y="-88"/><nail x="-1248" y="-32"/></transition><transition><source ref="id24"/><target ref="id26"/><label kind="select" x="-1000" y="33">e : id_vehicule</label><label kind="synchronisation" x="-1000" y="49">leaveB[e]?</label><label kind="assignment" x="-1032" y="64">--nbVehiculeSurPont</label><nail x="-968" y="32"/></transition><transition><source ref="id26"/><target ref="id24"/><label kind="select" x="-1000" y="-144">e : id_vehicule</label><label kind="synchronisation" x="-1000" y="-128">enterB[e]?</label><label kind="assignment" x="-1032" y="-114">++nbVehiculeSurPont</label><nail x="-968" y="-88"/></transition><transition><source ref="id25"/><target ref="id25"/><label kind="select" x="-400" y="32">e : id_vehicule</label><label kind="guard" x="-432" y="48">nbVehiculeSurPont &gt; 1</label><label kind="synchronisation" x="-400" y="64">leaveA[e]?</label><label kind="assignment" x="-432" y="80">--nbVehiculeSurPont</label><nail x="-368" y="-32"/><nail x="-368" y="32"/></transition><transition><source ref="id25"/><target ref="id26"/><label kind="select" x="-696" y="40">e : id_vehicule</label><label kind="synchronisation" x="-696" y="56">leaveA[e]?</label><label kind="assignment" x="-736" y="72">--nbVehiculeSurPont</label><nail x="-664" y="32"/></transition><transition><source ref="id25"/><target ref="id25"/><label kind="select" x="-408" y="-168">e : id_vehicule</label><label kind="guard" x="-488" y="-152">nbVehiculeSurPont &lt;= CAPACITE_PONT</label><label kind="synchronisation" x="-408" y="-136">enterA[e]?</label><label kind="assignment" x="-440" y="-120">++nbVehiculeSurPont</label><nail x="-368" y="-32"/><nail x="-368" y="-96"/></transition><transition><source ref="id26"/><target ref="id25"/><label kind="select" x="-696" y="-144">e : id_vehicule</label><label kind="synchronisation" x="-696" y="-128">enterA[e]?</label><label kind="assignment" x="-736" y="-112">++nbVehiculeSurPont</label><nail x="-664" y="-88"/></transition></template><template><name x="5" y="5">VAPA</name><parameter>const id_vehicule_p id</parameter><declaration>// Horloge utilisée pour simuler le temps que prend un véhicule pour traverser le pont
clock tempsTraverser;
// Horloge utilisée pour calculer et vérifier le temps d'attente d'un véhicule
clock tempsAttente;</declaration><location id="id27" x="304" y="8"><committed/></location><location id="id28" x="304" y="-152"><name x="320" y="-168">EstSurPont</name></location><location id="id29" x="56" y="96"><name x="32" y="104">Attente</name></location><location id="id30" x="152" y="8"><name x="112" y="-32">EntreSurPontA</name><committed/></location><location id="id31" x="-48" y="8"><name x="-128" y="0">Approche</name><urgent/></location><location id="id32" x="-48" y="-152"><name x="-96" y="-168">Loin</name></location><init ref="id32"/><transition><source ref="id27"/><target ref="id28"/><label kind="synchronisation" x="312" y="-80">onBridgeA[id]!</label></transition><transition><source ref="id30"/><target ref="id27"/><label kind="synchronisation" x="192" y="8">enterA[id]!</label><label kind="assignment" x="168" y="24">tempsTraverser := 0</label></transition><transition><source ref="id28"/><target ref="id32"/><label kind="guard" x="-24" y="-200">tempsTraverser &gt;= TEMPS_TRAVERSER_PONT</label><label kind="synchronisation" x="88" y="-184">leaveA[id]!</label><nail x="24" y="-152"/></transition><transition><source ref="id29"/><target ref="id30"/><label kind="synchronisation" x="88" y="64">goA[id]?</label></transition><transition><source ref="id31"/><target ref="id29"/><label kind="synchronisation" x="-72" y="56">stopA[id]?</label><label kind="assignment" x="-104" y="72">tempsAttente := 0</label></transition><transition><source ref="id31"/><target ref="id30"/><label kind="synchronisation" x="8" y="-16">goA[id]?</label></transition><transition><source ref="id32"/><target ref="id31"/><label kind="synchronisation" x="-120" y="-96">apprPA[id]!</label></transition></template><template><name x="5" y="5">VAPB</name><parameter>const id_vehicule_p id</parameter><declaration>// Horloge utilisée pour simuler le temps que prend un véhicule pour traverser le pont
clock tempsTraverser;
// Horloge utilisée pour calculer et vérifier le temps d'attente d'un véhicule
clock tempsAttente;</declaration><location id="id33" x="304" y="8"><committed/></location><location id="id34" x="304" y="-152"><name x="320" y="-168">EstSurPont</name></location><location id="id35" x="56" y="96"><name x="32" y="104">Attente</name></location><location id="id36" x="152" y="8"><name x="112" y="-32">EntreSurPontA</name><committed/></location><location id="id37" x="-48" y="8"><name x="-128" y="0">Approche</name><urgent/></location><location id="id38" x="-48" y="-152"><name x="-96" y="-168">Loin</name></location><init ref="id38"/><transition><source ref="id33"/><target ref="id34"/><label kind="synchronisation" x="312" y="-80">onBridgeB[id]!</label></transition><transition><source ref="id36"/><target ref="id33"/><label kind="synchronisation" x="192" y="8">enterB[id]!</label><label kind="assignment" x="168" y="24">tempsTraverser := 0</label></transition><transition><source ref="id34"/><target ref="id38"/><label kind="guard" x="-24" y="-200">tempsTraverser &gt;= TEMPS_TRAVERSER_PONT</label><label kind="synchronisation" x="88" y="-184">leaveB[id]!</label><nail x="24" y="-152"/></transition><transition><source ref="id35"/><target ref="id36"/><label kind="synchronisation" x="88" y="64">goB[id]?</label></transition><transition><source ref="id37"/><target ref="id35"/><label kind="synchronisation" x="-72" y="56">stopB[id]?</label><label kind="assignment" x="-104" y="72">tempsAttente := 0</label></transition><transition><source ref="id37"/><target ref="id36"/><label kind="synchronisation" x="8" y="-16">goB[id]?</label></transition><transition><source ref="id38"/><target ref="id37"/><label kind="synchronisation" x="-120" y="-96">apprPB[id]!</label></transition></template><system>system VAA, VAPA, VAPB, VAB, CTRLP, P;</system></nta>